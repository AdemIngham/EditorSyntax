filetypes:
    - ps1
    - psm1
    - psd1
name: PowerShell
patterns:
-
    comment: 'Stop parsing'
    begin: (--%)
    beginCaptures:
        '1':
            name: keyword.operator
    end: $
    patterns:
        - include: '#lineComment'
        -
            match: (.)
            name: source.powershell
- include: '#lineComment'
- include: '#blockComment'
- include: '#stringSingleQuoted'
- include: '#stringDoubleQuoted'
- include: '#commands'
- include: '#arrayDeclaration'
- include: '#hashTable'
- include: '#scriptBlock'
- include: '#subExpression'
- include: '#variable'
- include: '#controlWords'
- include: '#executableFiles'
- include: '#numericConstant'
repository:
    lineComment:
        comment: 'Line comment - must start with new line or at least one whitespace character before the ''#''.'
        begin: '(^#|\s#)'
        beginCaptures:
            '1':
                name: punctuation.definition.comment
        end: $
        name: comment.line
    blockComment:
        begin: '(<#)'
        beginCaptures:
            '1':
                name: punctuation.definition.comment
        end: '(#>)'
        endCaptures:
            '1':
                name: punctuation.definition.comment
        name: comment.block
    stringEscapeChars:
        patterns:
            - name: constant.character.escape
              match: '(`[0abfnrtv"''$`])'
            - name: constant.character.escape
              match: '("")'
    stringSingleQuoted:
        begin: '((?<!'')'')'
        beginCaptures:
            '1':
                name: punctuation.definition.string.begin
        end: '(''(?!''))'
        endCaptures:
            '1':
                name: punctuation.definition.string.end
        name: string.quoted.single
        patterns:
            - include: '#stringSingleQuotedEscape'
    stringSingleQuotedEscape:
        match: '('')(?:'')'
        captures:
            '1': { name: constant.character.escape }
    stringDoubleQuoted:
        begin: '((?<!\")\")'
        beginCaptures:
            '1':
                name: punctuation.definition.string.begin
        end: '(\"(?!\"))'
        endCaptures:
            '1':
                name: punctuation.definition.string.end
        name: string.quoted.double
        patterns:
            - include: '#stringEscapeChars'
            - include: '#variableWithoutPropertyHighlighting'
            - include: '#subExpression'
    controlWords:
        match: '(\b(?<!-|\$)(?i:begin|process|exit|break|return|catch|finally|for|continue|foreach|throw|from|trap|try|do|if|until|in|using|else|elseif|while|end|where)\b(?!-|\.))'
        name: keyword.control
    executableFiles:
        comment: 'Executable files, like exe, com, cmd and bat'
        match: '(\b(([\p{L}A-Za-z0-9\-_\.]+).(?i:exe|com|cmd|bat))\b)'
        name: support.executable
    arrayDeclaration:
        begin: '(\@?\()'
        beginCaptures:
            '0':
                name: punctuation.section.parens.begin
        end: '(\))(\.)*(([\w"'']+)*)'
        endCaptures:
            '1':
                name: punctuation.section.parens.end
            '2':
                name: punctuation.accessor
            '3':
                name: variable.parameter
        name: meta.array
        patterns:
            - include: $self
    hashTable:
        begin: '(@\{)'
        beginCaptures:
            '1':
                name: punctuation.section.braces.begin
        end: '(\})'
        endCaptures:
            '1':
                name: punctuation.section.braces.end
        name: meta.hashtable
        patterns:
            - include: $self
    scriptBlock:
        begin: '(\{)'
        beginCaptures:
            '1':
                name: punctuation.section.braces.begin
        end: '(\})'
        endCaptures:
            '1':
                name: punctuation.section.braces.end
        name: meta.scriptblock
        patterns:
            - include: $self
    subExpression:
        begin: (\$\()
        beginCaptures:
            '1':
                name: punctuation.section.parens.begin
        end: (\))
        endCaptures:
            '1':
                name: punctuation.section.parens.end
        name: meta.subexpression
        patterns:
            - include: $self
    commands:
        patterns:
            -
                begin: '(?<!\\)\b((?i:(Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write))-(\w+))\b(?!\.|\\)'
                beginCaptures:
                    '1': {name: support.function}
                comment: 'Generic function match based on Verb-Noun pair using list of approved verbs.'
                end: '((?=\))|(?=\})|(?<!`)\n|(?<!`)\r|(\|))'
                endCaptures:
                    '2': {name: keyword.operator.powershell}
                name: meta.command.powershell
                patterns:
                    - {include: '#scriptblock'}
                    - {include: '#commandParameter'}
                    - {include: '#lineComment'}
                    - {include: '#redirection'}
                    - {include: '#numericConstant'}
                    - {include: '#operators'}
                    - {include: '#variable'}
                    - {include: '#stringDoubleQuoted'}
                    - {include: '#stringSingleQuoted'}
                    - {include: '#arrayDeclaration'}
                    - {include: '#illegalBacktick'}
                    - {include: '#illegalVariable'}
            -
                begin: '(?<!\\)\b(?i:foreach-object|tee-object|where-object|sort-object)\b(?!\.|\\)'
                beginCaptures:
                    '0': {name: support.function.powershell}
                comment: 'Built-in commands that don''t adhere to the approved verbs standard.'
                end: '((?=\))|(?=\})|(?<!`)\n|(?<!`)\r|(\|))'
                endCaptures:
                    '2': {name: keyword.operator.powershell}
                name: meta.command.powershell
                patterns:
                    - {include: '#scriptblock'}
                    - {include: '#commandParameter'}
                    - {include: '#lineComment'}
                    - {include: '#redirection'}
                    - {include: '#numericConstant'}
                    - {include: '#operators'}
                    - {include: '#variable'}
                    - {include: '#stringDoubleQuoted'}
                    - {include: '#stringSingleQuoted'}
                    - {include: '#arrayDeclaration'}
                    - {include: '#illegalBacktick'}
                    - {include: '#illegalVariable'}
            -
                begin: '(?<!\\|\[)\b(?i:ac|asnp|cat|cd|cfs|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|curl|cvpa|dbp|del|diff|dir|dnsn|ebp|echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fhx|fl|ft|fw|gal|gbp|gc|gcb|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps|gpv|group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md|measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri|rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|scb|select|set|shcm|si|sl|sleep|sls|sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|wget|wjb|write)\b(?!\.|\\|\])'
                beginCaptures:
                    '0': {name: support.function.powershell}
                comment: 'Built-in aliases'
                end: '((?=\))|(?=\})|(?<!`)\n|(?<!`)\r|(\|))'
                endCaptures:
                    '2': {name: keyword.operator.powershell}
                name: meta.command.powershell
                patterns:
                    - {include: '#scriptblock'}
                    - {include: '#commandParameter'}
                    - {include: '#lineComment'}
                    - {include: '#redirection'}
                    - {include: '#numericConstant'}
                    - {include: '#operators'}
                    - {include: '#variable'}
                    - {include: '#stringDoubleQuoted'}
                    - {include: '#stringSingleQuoted'}
                    - {include: '#arrayDeclaration'}
                    - {include: '#illegalBacktick'}
                    - {include: '#illegalVariable'}
            -
                begin: '(\b(([A-Za-z0-9\-_\.]+).(?i:ps1))\b)'
                beginCaptures:
                    '0': {name: support.function.powershell}
                comment: 'External script'
                end: '((?=\))|(?=\})|(?<!`)\n|(?<!`)\r|(\|))'
                endCaptures:
                    '2': {name: keyword.operator.powershell}
                name: meta.command.powershell
                patterns:
                    - {include: '#scriptblock'}
                    - {include: '#commandParameter'}
                    - {include: '#lineComment'}
                    - {include: '#redirection'}
                    - {include: '#numericConstant'}
                    - {include: '#operators'}
                    - {include: '#variable'}
                    - {include: '#stringDoubleQuoted'}
                    - {include: '#stringSingleQuoted'}
                    - {include: '#arrayDeclaration'}
                    - {include: '#illegalBacktick'}
                    - {include: '#illegalVariable'}
    numericConstant:
        patterns:
            -
                comment: 'Real [(+|-)] digits . digits [e [(+|-)] digits] [(d|l)] [(kb|mb|gb|tb|pb)]'
                match: '(?<!\w)([-+]?)\d+\.\d+(?i:e(\+|-){0,1}\d+){0,1}(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\w|\d)'
                name: constant.numeric.real
            -
                comment: 'Real [(+|-)] . digits [e [(+|-)] digits] [(d|l)] [(kb|mb|gb|tb|pb)]'
                match: '(?<!\.|\d|\w)([-+]?)\.\d+(?i:e(\+|-){0,1}\d+){0,1}(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\w|\d)'
                name: constant.numeric.real
            -
                comment: 'Real [(+|-)] digits . [e [(+|-)] digits] [(d|l)] [(kb|mb|gb|tb|pb)]'
                match: '(?<!\w)([-+]?)(?<!\d)\d+\.(?i:e(\+|-){0,1}\d+){0,1}(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\w|\d|\.)'
                name: constant.numeric.real
            -
                comment: 'Integer [(+|-)] digits [(d|l)] [(kb|mb|gb|tb|pb)]'
                match: '(?<!\w|\w\.)([-+]?)\d+(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\w|\d)'
                name: constant.numeric.integer
            -
                comment: 'Real [(+|-)] digits [e [(+|-)] digits] [(d|l)] [(kb|mb|gb|tb|pb)]'
                match: '(?<!\w|\.)([-+]?)(?<!\d)\d+(?i:e(\+|-){0,1}\d+){0,1}(?i:d|l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\w|\d|\.)'
                name: constant.numeric.real
            -
                comment: 'Hexadecimal 0x 0-f [l] [kb|mb|gb|tb|pb]'
                match: '(?<!\w|\d)([-+]?)(?i:0x)(?i:[0-9a-f])+(?i:l){0,1}(?i:kb|mb|gb|tb|pb){0,1}(?!\w|\d)'
                name: constant.numeric.hex
    variable:
        patterns:
            -
                comment: 'Invalid variable name'
                match: (\$)(\w+-\w+)\b
                name: invalid.illegal
            -
                captures:
                    '1': {name: punctuation.definition.variable}
                    '2': {name: variable.language}
                    '3': {name: punctuation.accessor}
                    '4': {name: variable.parameter}
                comment: 'Automatic variables - read-only.'
                match: '(\$)(?i:(_|args|consolefilename|error|event|eventsubscriber|executioncontext|false|foreach|home|host|input|lastexitcode|matches|myinvocation|nestedpromptlevel|null|pid|psboundparameters|pscmdlet|psculture|psdebugcontext|pshome|psitem|psscriptroot|psuiculture|psversiontable|pwd|sender|shellid|sourceargs|sourceeventargs|switch|this|true))\b(\.)*(([\w"''\- @#]+)*)'
            -
                captures:
                    '0': {name: meta.variable}
                    '1': {name: punctuation.definition.variable}
                    '2': {name: storage.modifier.scope}
                    '3': {name: variable.other.readwrite}
                    '4': {name: variable.other.readwrite}
                    '5': {name: punctuation.accessor}
                    '6': {name: variable.parameter}
                    '7': {name: variable.parameter}
                comment: '$var, $local:var'
                match: '(\$)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?(\w+)(:\w+)?((\.[\w"''\- @#]+)*)'
            -
                captures:
                    '1': {name: punctuation.definition.variable}
                    '2': {name: punctuation.definition.variable}
                    '3': {name: storage.modifier.scope}
                    '4': {name: variable.other.readwrite}
                    '5': {name: punctuation.definition.variable}
                    '6': {name: punctuation.accessor}
                    '7': {name: variable.parameter}
                comment: '${var}, ${script:var}'
                match: '(\$)(\{)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?(.+?)(\})(\.)*(([\w"''\- @#]+)*)'
            -
                captures:
                    '1': {name: punctuation.definition.variable}
                    '2': {name: variable.other.readwrite}
                comment: Splatting
                match: (@)(\w+)
    variableWithoutPropertyHighlighting:
        patterns:
            -
                comment: 'Invalid variable name'
                match: (\$)(\w+-\w+)\b
                name: invalid.illegal
            -
                captures:
                    '1': {name: punctuation.definition.variable}
                    '2': {name: variable.language}
                comment: 'Automatic variables - read-only.'
                match: '(\$)(?i:(_|args|consolefilename|error|event|eventsubscriber|executioncontext|false|foreach|home|host|input|lastexitcode|matches|myinvocation|nestedpromptlevel|null|pid|psboundparameters|pscmdlet|psculture|psdebugcontext|pshome|psitem|psscriptroot|psuiculture|psversiontable|pwd|sender|shellid|sourceargs|sourceeventargs|switch|this|true))\b'
            -
                captures:
                    '1': {name: keyword.other.powershell}
                    '2': {name: storage.modifier.scope.powershell}
                    '3': {name: variable.other.readwrite.powershell}
                    '4': {name: variable.other.readwrite.powershell}
                comment: '$var, $local:var'
                match: '(\$)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?(\w+)(:\w+)?'
            -
                captures:
                    '1': {name: keyword.other.powershell}
                    '2': {name: keyword.other.powershell}
                    '3': {name: storage.modifier.scope.powershell}
                    '4': {name: variable.other.readwrite.powershell}
                    '5': {name: keyword.other.powershell}
                comment: '${var}, ${script:var}'
                match: '(\$)(\{)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?(.+?)(\})'
            -
                captures:
                    '1': {name: keyword.other.powershell}
                    '2': {name: variable.other.readwrite.powershell}
                comment: Splatting
                match: (@)(\w+)
scopeName: source.powershell
uuid: 3af8c7dd-6c15-40d4-a28b-c6a3105a39c7