filetypes: [
  "ps1"
  "psm1"
  "psd1"
]
name: "PowerShell"
patterns: [
  {
    comment: "Stop parsing"
    begin: "(--%)"
    beginCaptures:
      "1":
        name: "keyword.operator"
    end: "$"
    patterns: [
      {
        include: "#lineComment"
      }
      {
        match: "(.)"
        name: "source.powershell"
      }
    ]
  }
  {
    include: "#lineComment"
  }
  {
    include: "#blockComment"
  }
  {
    include: "#stringSingleQuoted"
  }
  {
    include: "#stringDoubleQuoted"
  }
  {
    include: "#arrayDeclaration"
  }
  {
    include: "#hashTable"
  }
  {
    include: "#scriptBlock"
  }
  {
    include: "#subExpression"
  }
  {
    include: "#variable"
  }
  {
    include: "#controlWords"
  }
  {
    include: "#executableFiles"
  }
]
repository:
  lineComment:
    comment: "Line comment - must start with new line or at least one whitespace character before the '#'."
    begin: "(^#|\\s#)"
    beginCaptures:
      "1":
        name: "punctuation.definition.comment"
    end: "$"
    name: "comment.line"
  blockComment:
    begin: "(<#)"
    beginCaptures:
      "1":
        name: "punctuation.definition.comment"
    end: "(#>)"
    endCaptures:
      "1":
        name: "punctuation.definition.comment"
    name: "comment.block"
  stringEscapeChars:
    patterns: [
      {
        name: "constant.character.escape"
        match: "(`[0abfnrtv\"'$`])"
      }
      {
        name: "constant.character.escape"
        match: "(\"\")"
      }
    ]
  stringSingleQuoted:
    begin: "((?<!')')"
    beginCaptures:
      "1":
        name: "punctuation.definition.string.begin"
    end: "('(?!'))"
    endCaptures:
      "1":
        name: "punctuation.definition.string.end"
    name: "string.quoted.single"
    patterns: [
      {
        include: "#stringSingleQuotedEscape"
      }
    ]
  stringSingleQuotedEscape:
    match: "(')(?:')"
    captures:
      "1":
        name: "constant.character.escape"
  stringDoubleQuoted:
    begin: "((?<!\\\")\\\")"
    beginCaptures:
      "1":
        name: "punctuation.definition.string.begin"
    end: "(\\\"(?!\\\"))"
    endCaptures:
      "1":
        name: "punctuation.definition.string.end"
    name: "string.quoted.double"
    patterns: [
      {
        include: "#stringEscapeChars"
      }
      {
        include: "#variableWithoutPropertyHighlighting"
      }
      {
        include: "#subExpression"
      }
    ]
  controlWords:
    match: "(\\b(?<!-|\\$)(?i:begin|process|exit|break|return|catch|finally|for|continue|foreach|throw|from|trap|try|do|if|until|in|using|else|elseif|while|end|where)\\b(?!-|\\.))"
    name: "keyword.control"
  executableFiles:
    comment: "Executable files, like exe, com, cmd and bat"
    match: "(\\b(([\\p{L}A-Za-z0-9\\-_\\.]+).(?i:exe|com|cmd|bat))\\b)"
    name: "support.executable"
  arrayDeclaration:
    begin: "(\\@?\\()"
    beginCaptures:
      "0":
        name: "punctuation.section.parens.begin"
    end: "(\\))(\\.)*(([\\w\"']+)*)"
    endCaptures:
      "1":
        name: "punctuation.section.parens.end"
      "2":
        name: "punctuation.accessor"
      "3":
        name: "variable.parameter"
    name: "meta.array"
    patterns: [
      {
        include: "$self"
      }
    ]
  hashTable:
    begin: "(@\\{)"
    beginCaptures:
      "1":
        name: "punctuation.section.braces.begin"
    end: "(\\})"
    endCaptures:
      "1":
        name: "punctuation.section.braces.end"
    name: "meta.hashtable"
    patterns: [
      {
        include: "$self"
      }
    ]
  scriptBlock:
    begin: "(\\{)"
    beginCaptures:
      "1":
        name: "punctuation.section.braces.begin"
    end: "(\\})"
    endCaptures:
      "1":
        name: "punctuation.section.braces.end"
    name: "meta.scriptblock"
    patterns: [
      {
        include: "$self"
      }
    ]
  subExpression:
    begin: "(\\$\\()"
    beginCaptures:
      "1":
        name: "punctuation.section.parens.begin"
    end: "(\\))"
    endCaptures:
      "1":
        name: "punctuation.section.parens.end"
    name: "meta.subexpression"
    patterns: [
      {
        include: "$self"
      }
    ]
  variable:
    patterns: [
      {
        comment: "Invalid variable name"
        match: "(\\$)(\\w+-\\w+)\\b"
        name: "invalid.illegal"
      }
      {
        captures:
          "1":
            name: "punctuation.definition.variable"
          "2":
            name: "variable.language"
          "3":
            name: "punctuation.accessor"
          "4":
            name: "variable.parameter"
        comment: "Automatic variables - read-only."
        match: "(\\$)(?i:(_|args|consolefilename|error|event|eventsubscriber|executioncontext|false|foreach|home|host|input|lastexitcode|matches|myinvocation|nestedpromptlevel|null|pid|psboundparameters|pscmdlet|psculture|psdebugcontext|pshome|psitem|psscriptroot|psuiculture|psversiontable|pwd|sender|shellid|sourceargs|sourceeventargs|switch|this|true))\\b(\\.)*(([\\w\"'\\- @#]+)*)"
      }
      {
        captures:
          "0":
            name: "meta.variable"
          "1":
            name: "punctuation.definition.variable"
          "2":
            name: "storage.modifier.scope"
          "3":
            name: "variable.other.readwrite"
          "4":
            name: "variable.other.readwrite"
          "5":
            name: "punctuation.accessor"
          "6":
            name: "variable.parameter"
          "7":
            name: "variable.parameter"
        comment: "$var, $local:var"
        match: "(\\$)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?(\\w+)(:\\w+)?((\\.[\\w\"'\\- @#]+)*)"
      }
      {
        captures:
          "1":
            name: "punctuation.definition.variable"
          "2":
            name: "punctuation.definition.variable"
          "3":
            name: "storage.modifier.scope"
          "4":
            name: "variable.other.readwrite"
          "5":
            name: "punctuation.definition.variable"
          "6":
            name: "punctuation.accessor"
          "7":
            name: "variable.parameter"
        comment: "${var}, ${script:var}"
        match: "(\\$)(\\{)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?(.+?)(\\})(\\.)*(([\\w\"'\\- @#]+)*)"
      }
      {
        captures:
          "1":
            name: "punctuation.definition.variable"
          "2":
            name: "variable.other.readwrite.powershell"
        comment: "Splatting"
        match: "(@)(\\w+)"
      }
    ]
  variableWithoutPropertyHighlighting:
    patterns: [
      {
        comment: "Invalid variable name"
        match: "(\\$)(\\w+-\\w+)\\b"
        name: "invalid.illegal.powershell"
      }
      {
        captures:
          "1":
            name: "constant.language.powershell"
          "2":
            name: "constant.language.powershell"
        comment: "Automatic variables - read-only."
        match: "(\\$)(?i:(_|args|consolefilename|error|event|eventsubscriber|executioncontext|false|foreach|home|host|input|lastexitcode|matches|myinvocation|nestedpromptlevel|null|pid|psboundparameters|pscmdlet|psculture|psdebugcontext|pshome|psitem|psscriptroot|psuiculture|psversiontable|pwd|sender|shellid|sourceargs|sourceeventargs|switch|this|true))\\b"
      }
      {
        captures:
          "1":
            name: "keyword.other.powershell"
          "2":
            name: "storage.modifier.scope.powershell"
          "3":
            name: "variable.other.readwrite.powershell"
          "4":
            name: "variable.other.readwrite.powershell"
        comment: "$var, $local:var"
        match: "(\\$)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?(\\w+)(:\\w+)?"
      }
      {
        captures:
          "1":
            name: "keyword.other.powershell"
          "2":
            name: "keyword.other.powershell"
          "3":
            name: "storage.modifier.scope.powershell"
          "4":
            name: "variable.other.readwrite.powershell"
          "5":
            name: "keyword.other.powershell"
        comment: "${var}, ${script:var}"
        match: "(\\$)(\\{)((?i:global|local|script|private|using|env|function|alias|cert|variable|hkcu|hklm|wsman):)?(.+?)(\\})"
      }
      {
        captures:
          "1":
            name: "keyword.other.powershell"
          "2":
            name: "variable.other.readwrite.powershell"
        comment: "Splatting"
        match: "(@)(\\w+)"
      }
    ]
scopeName: "source.powershell"
uuid: "3af8c7dd-6c15-40d4-a28b-c6a3105a39c7"